dateMax <- max(dtsAll$date,na.rm = T)
addDerivatives (dtsAll)
dtsAll[, `Mortality Rate` := round(deathsTotal/confirmedTotal*100, 2)] []
dtsAll[city=="Ottawa"][(.N-7):.N]
dtsAll %>% names
dtTopInfectedToday <- dtsAll[city!=STR_TOTAL] %>% extractMostInfectedToday (input$topN, input$metric)  %T>% print
aTopInfectedTodayCities <- dtsAll[city!=STR_TOTAL] %>% extractMostInfectedToday (input$topN, input$metric) %>% pull(city) %T>% print
aTopInfectedTodayCities <- dtsAll[city!=STR_TOTAL] %>% extractMostInfectedToday (input$topN, input$metric) %>% .[, city] %T>% print
dts0 <- dtsAll[city %in% aTopInfectedTodayCities] %T>% print
library(ggplot2)
dts0[ date > dateMax- input$daysback] %>%
ggplot() +
theme_bw() +
facet_wrap(. ~ reorder(region, -get(input$metric)),  scales=ifelse(input$fixscale, "free_y", "fixed")  )  +
geom_line(aes_string("date", input$metric), size=1) +
scale_x_date(date_breaks = "1 week", date_minor_breaks = "1 day", date_labels = "%b %d") +
labs(
title= paste0("Trends"),
y=NULL,
x=NULL
)
g1 <- dtTopInfectedToday %>%
ggplot( aes(x=reorder(region, get(input$metric)) )  )  +
coord_flip() +
geom_col(aes(y=confirmedSpeed,fill=confirmedGrowth., width=confirmedTotal/max(confirmedTotal)), alpha=1) +
scale_fill_gradient2(low = "yellow", high="red", mid="orange", midpoint = 1) +   #scale_fill_grey(0.3, 0.9) +
geom_point(aes(y=confirmedSpeed-confirmedAccel., size=confirmedSpeed), alpha=0.4,  col="orange") +
geom_point(aes(y=confirmedSpeed, size=confirmedSpeed ), alpha=1, col="orange") +
geom_segment( aes(
xend = region,
yend=confirmedSpeed, y=confirmedSpeed-confirmedAccel.      ),
size = 1, col="black",
arrow = arrow(length = unit(0.2, "cm"))
) +
# geom_text(aes(y=0, label=label), hjust=0, vjust=1, alpha=0.7)  +
labs(
title= paste0("New cases a day"),
# subtitle= paste0("Bar width is proportional to the total number of confirmed cases"),
caption=paste0(  "Last updated: ", dateMax,
"\n Bar width is proportional to total number of cases"),
size="Total number of cases",
fill="Growth rate (Rt)",
y=NULL,      x=NULL
) +
guides(size="none") +
# guides(fill="none") +
theme(legend.position = "bottom") +
theme_bw()
g1
g2 <- dtTopInfectedToday %>%
ggplot(      aes(x=reorder(region, get(input$metric)) )    )  +
coord_flip() +
scale_y_continuous(limits = c(0.5, 1.5)) +
geom_hline(yintercept=1, col="black", size=1, alpha=0.5, linetype=2) +
# geom_point(aes(y=confirmedGrowth., size=confirmedSpeed), data = dt00[date==dateMax-1], col="orange", alpha=0.4) +
geom_point(aes(y=confirmedGrowth.-confirmedGrowth.Accel, size=confirmedSpeed, col=confirmedGrowth.)) +
geom_point(aes(y=confirmedGrowth., size=confirmedSpeed,col= confirmedGrowth.)) +
scale_color_gradient2(low = "yellow", high="red", mid="orange", midpoint = 1) +   #scale_fill_grey(0.3, 0.9) +
geom_segment( aes(
xend = region,
yend=confirmedGrowth., y=confirmedGrowth.-confirmedGrowth.Accel ),
size = 1, col="black",
arrow = arrow(length = unit(0.2, "cm"))
) +
labs(
title= paste0("Growth Rate (Rt)"),
# subtitle =        "Change since yesterday is marked by arrow. ",
size = "New cases a day",
col="Growth rate (Rt)",
# fill = "Growth",
# subtitle= paste0("Bar width is proportional to the total number of cases"),
caption=paste0(  "Data source: University of Toronto",
"\nChange since yesterday is marked by arrow "),
y=NULL,
x=NULL
) +
guides(col="none") +
theme(legend.position = "bottom") +
theme_bw()
g2
readCovidUofT.csv <- function (offline=T, abbreviate=T) {
if (offline) { # to run in GC networks that do not allow access to external sites
# dtCases <- fread("MY_DATASETS/cases_2021-5000.csv", stringsAsFactors = F )
dtCases <- fread("MY_DATASETS/cases_2021.csv", stringsAsFactors = F )
# fwrite(dtCases[(.N-5000):.N], "MY_DATASETS/cases_2021-5000.csv")
dtMortality <- fread("MY_DATASETS/mortality_2021.csv", stringsAsFactors = F )
} else {
# dtMortality  <- fread("https://github.com/ishaberry/Covid19Canada/raw/master/mortality.csv", stringsAsFactors = F ) <- This is where they used to be originally
dtCases <- fread("https://github.com/ccodwg/Covid19Canada/raw/master/individual_level/cases_2021.csv", stringsAsFactors = F )
dtMortality <- fread("https://github.com/ccodwg/Covid19Canada/raw/master/individual_level/mortality_2021.csv", stringsAsFactors = F )
}
if (F) { # quickly see what they are
dt.setOptions(topn = 2)
dtCases;dtMortality
}
# Worst: dtCases <- dtCases %>% select(5:8) %T>% print(2)
# Better: dtCases <- dtCases[, 5:8] %T>% print(2)
# Much better:
dtCases[, (1:ncol(dtCases) %wo% 5:8) := NULL] []
# Which can be written as a function:   dtCases %>% dt.keepCols(5:8) %>% print(2)
dtMortality <- dtMortality[, c(6:9)] %T>% print(2)
# dt.keepCols(dtCases, 5:8)     %>% setnames(c("city", "state", "country", "date")) %>%  .[date := dmy(date)]
# dt.keepCols(dtMortality, 6:9) %>% setnames(c("city", "state", "country", "date")) %>%  .[date := dmy(date)]
setnames(dtCases, c("city", "state", "country", "date"));
setnames(dtMortality, c("city", "state", "country", "date"));
dtCases [ , date := dmy(date)];
dtMortality [ , date := dmy(date)]
if (T) { # quick check on how geo names are spelled
dtCases %>% unique (by=c("state","city") ) # 102
dtCases[city != "Not Reported", .(state,city) ] %>% unique(by=c("state","city") )
# %>% saveRDS("../dtCaHealthRegions.Rds") # 92
}
# . get at state level ----
dt0 <- rbind(
dtCases[ , .(cases=.N, type="confirmed" ), keyby = c("date", "state", "country")],
dtMortality[ , .(cases=.N, type="deaths"), keyby = c("date", "state", "country")]
) [, city:=STR_TOTAL] %>%
dcast(date+country+state+city ~ type, value.var="cases")
# . get at city level ----
dt00 <- rbind (
dtCases[ , .(cases=.N, type="confirmed" ), keyby = c("date", "country", "state", "city")],
dtMortality[ , .(cases=.N, type="deaths"), keyby = c("date", "country", "state", "city")]
) %>%
dcast(date+country+state+city ~ type, value.var="cases")
dtAll <- dt0 %>% rbind(dt00)
rm(dt0); rm(dt00)
dtAll [, (COLS_CASES):= lapply(.SD, tidyr::replace_na, 0), .SDcol = COLS_CASES]
dtAll [, (COLS_GEO):= lapply(.SD, base::iconv,"ASCII//TRANSLIT", from="UTF-8", to="ASCII//TRANSLIT"), .SDcol = COLS_GEO]
if (abbreviate) { # perhaps, better to use official LOOKUP TABLE from Canada.ca?
dtAll %>%
dt.replaceAwithB("state", "New Brunswick", "NB"  ) %>%
dt.replaceAwithB("state",  "Nova Scotia", "NS" ) %>%
dt.replaceAwithB("state",  "Saskatchewan", "SK" ) %>%
dt.replaceAwithB("state",  "Manitoba", "MB" ) %>%
dt.replaceAwithB("state",  "Ontario", "ON" ) %>%
dt.replaceAwithB("state",  "Quebec", "QC" ) %>%
dt.replaceAwithB("state", "Alberta", "AB"  )
} else {
dtAll %>%
dt.replaceAwithB("state", "PEI", "Prince Edward Island"  ) %>%
dt.replaceAwithB("state", "BC", "British Columbia"  ) %>%
dt.replaceAwithB("state",  "NWT", "Northwest Territories" ) %>%
dt.replaceAwithB("state",  "NL", "Newfoundland and Labrador" )
}
dtAll[, region:=paste0(str_trunc(state, 3, ellipsis = ""), ": ", city)] # used in reduceToTopN()
# This can be done outside of function:
# dtAll <- dtAll[ state != "Repatriated"]
# dtAll [, (COLS_GEO):=lapply(.SD, as.ordered), .SDcols=COLS_GEO]
setkey(dtAll, date)
return(dtAll)
}
dtsAll <- readCovidUofT.csv (offline=T) # better name could be dtsAll to indicated that this is data table time series
dateMax <- max(dtsAll$date,na.rm = T)
addDerivatives (dtsAll)
dtsAll[, `Mortality Rate` := round(deathsTotal/confirmedTotal*100, 2)] []
dtsAll[city=="Ottawa"][(.N-7):.N]
dtsAll %>% names
dtTopInfectedToday <- dtsAll[city!=STR_TOTAL] %>% extractMostInfectedToday (input$topN, input$metric)  %T>% print
aTopInfectedTodayCities <- dtsAll[city!=STR_TOTAL] %>% extractMostInfectedToday (input$topN, input$metric) %>% .[, city] %T>% print   # NB: use of .[, city] instead of dplyr::pull(city)
dts0 <- dtsAll[city %in% aTopInfectedTodayCities] %T>% print
library(ggplot2)
dts0[ date > dateMax- input$daysback] %>%
ggplot() +
theme_bw() +
facet_wrap(. ~ reorder(region, -get(input$metric)),  scales=ifelse(input$fixscale, "free_y", "fixed")  )  +
geom_line(aes_string("date", input$metric), size=1) +
scale_x_date(date_breaks = "1 week", date_minor_breaks = "1 day", date_labels = "%b %d") +
labs(
title= paste0("Trends"),
y=NULL,
x=NULL
)
g1 <- dtTopInfectedToday %>%
ggplot( aes(x=reorder(region, get(input$metric)) )  )  +
coord_flip() +
geom_col(aes(y=confirmedSpeed,fill=confirmedGrowth., width=confirmedTotal/max(confirmedTotal)), alpha=1) +
scale_fill_gradient2(low = "yellow", high="red", mid="orange", midpoint = 1) +   #scale_fill_grey(0.3, 0.9) +
geom_point(aes(y=confirmedSpeed-confirmedAccel., size=confirmedSpeed), alpha=0.4,  col="orange") +
geom_point(aes(y=confirmedSpeed, size=confirmedSpeed ), alpha=1, col="orange") +
geom_segment( aes(
xend = region,
yend=confirmedSpeed, y=confirmedSpeed-confirmedAccel.      ),
size = 1, col="black",
arrow = arrow(length = unit(0.2, "cm"))
) +
# geom_text(aes(y=0, label=label), hjust=0, vjust=1, alpha=0.7)  +
labs(
title= paste0("New cases a day"),
# subtitle= paste0("Bar width is proportional to the total number of confirmed cases"),
caption=paste0(  "Last updated: ", dateMax,
"\n Bar width is proportional to total number of cases"),
size="Total number of cases",
fill="Growth rate (Rt)",
y=NULL,      x=NULL
) +
guides(size="none") +
# guides(fill="none") +
theme(legend.position = "bottom") +
theme_bw()
g1
g2 <- dtTopInfectedToday %>%
ggplot(      aes(x=reorder(region, get(input$metric)) )    )  +
coord_flip() +
scale_y_continuous(limits = c(0.5, 1.5)) +
geom_hline(yintercept=1, col="black", size=1, alpha=0.5, linetype=2) +
# geom_point(aes(y=confirmedGrowth., size=confirmedSpeed), data = dt00[date==dateMax-1], col="orange", alpha=0.4) +
geom_point(aes(y=confirmedGrowth.-confirmedGrowth.Accel, size=confirmedSpeed, col=confirmedGrowth.)) +
geom_point(aes(y=confirmedGrowth., size=confirmedSpeed,col= confirmedGrowth.)) +
scale_color_gradient2(low = "yellow", high="red", mid="orange", midpoint = 1) +   #scale_fill_grey(0.3, 0.9) +
geom_segment( aes(
xend = region,
yend=confirmedGrowth., y=confirmedGrowth.-confirmedGrowth.Accel ),
size = 1, col="black",
arrow = arrow(length = unit(0.2, "cm"))
) +
labs(
title= paste0("Growth Rate (Rt)"),
# subtitle =        "Change since yesterday is marked by arrow. ",
size = "New cases a day",
col="Growth rate (Rt)",
# fill = "Growth",
# subtitle= paste0("Bar width is proportional to the total number of cases"),
caption=paste0(  "Data source: University of Toronto",
"\nChange since yesterday is marked by arrow "),
y=NULL,
x=NULL
) +
guides(col="none") +
theme(legend.position = "bottom") +
theme_bw()
g2
devtools::document()
use_package("IVIM")
library(usethis)
use_test("covid")
use_package("data.table")
devtools::document()
use_package("magrittr")
use_package("data.table")
use_package("lubridate", type="Imports")  # how about order ?! lubridate must be after data.table !
use_package("stringr")
use_package("IVIM")
devtools::document()
library(rCanada)
dtAll <- rCanada::readCovidUofT.csv()
library(rCanada)
dtAll <- rCanada::readCovidUofT.csv()
# dtCases <- fread("MY_DATASETS/cases_2021-5000.csv", stringsAsFactors = F )
dtCases <- fread("MY_DATASETS/cases_2021.csv", stringsAsFactors = F )
# fwrite(dtCases[(.N-5000):.N], "MY_DATASETS/cases_2021-5000.csv")
dtMortality <- fread("MY_DATASETS/mortality_2021.csv", stringsAsFactors = F )
# Worst:
dtCases <- dtCases %>% select(5:8) %T>% print(2)
# dtCases <- fread("MY_DATASETS/cases_2021-5000.csv", stringsAsFactors = F )
dtCases <- fread("MY_DATASETS/cases_2021.csv", stringsAsFactors = F )
# fwrite(dtCases[(.N-5000):.N], "MY_DATASETS/cases_2021-5000.csv")
dtMortality <- fread("MY_DATASETS/mortality_2021.csv", stringsAsFactors = F )
# Worst:   dtCases <- dtCases %>% select(5:8) %T>% print(2)
# Better:
dtCases <- dtCases[, 5:8] %T>% print(2)
dtMortality <- dtMortality[, c(6:9)] %T>% print(2)
setnames(dtCases, c("city", "state", "country", "date"));
setnames(dtMortality, c("city", "state", "country", "date"));
dtCases [ , date := dmy(date)];
dtMortality [ , date := dmy(date)]
if (T) { # quick check on how geo names are spelled
dtCases %>% unique (by=c("state","city") ) # 102
dtCases[city != "Not Reported", .(state,city) ] %>% unique(by=c("state","city") )
# %>% saveRDS("../dtCaHealthRegions.Rds") # 92
}
dt0 <- rbind(
dtCases[ , .(cases=.N, type="confirmed" ), keyby = c("date", "state", "country")],
dtMortality[ , .(cases=.N, type="deaths"), keyby = c("date", "state", "country")]
) [, city:=STR_TOTAL] %>%
dcast(date+country+state+city ~ type, value.var="cases")
library(rCanada)
dtAll <- rCanada::readCovidUofT.csv()
readCovidUofT.csv()
readCovidUofT.csv
library(magrittr)
library(data.table); options(datatable.print.class=TRUE) # NB: library(data.table) MUST BE BEFORE library(lubridate)!
library(dplyr)
library(dtplyr)
library(lubridate);  options(lubridate.week.start =  1)
library(stringr)
library(IVIM)
# To enable using the functions from this package  directrly from Shiny App!
input <- list()
input$metric <- "confirmedSpeed"
input$topN <- 12
input$daysback <- 31
input$dateToday <- "2021-03-31"
input$dateStart <- "2020-12-31"
input$fixscale = T
input$trend = T
input$log10 = T
COLS_GEO <- c("country",   "state",   "city")
COLS_CASES <- c("confirmed", "deaths")
STR_TOTAL <- "COMBINED"
# dtCases <- fread("MY_DATASETS/cases_2021-5000.csv", stringsAsFactors = F )
dtCases <- fread("MY_DATASETS/cases_2021.csv", stringsAsFactors = F )
# fwrite(dtCases[(.N-5000):.N], "MY_DATASETS/cases_2021-5000.csv")
dtMortality <- fread("MY_DATASETS/mortality_2021.csv", stringsAsFactors = F )
# Worst:   dtCases <- dtCases %>% select(5:8) %T>% print(2)
# Better:
dtCases <- dtCases[, 5:8] %T>% print(2)
dtMortality <- dtMortality[, c(6:9)] %T>% print(2)
setnames(dtCases, c("city", "state", "country", "date"));
setnames(dtMortality, c("city", "state", "country", "date"));
dtCases [ , date := dmy(date)];
dtMortality [ , date := dmy(date)]
if (T) { # quick check on how geo names are spelled
dtCases %>% unique (by=c("state","city") ) # 102
dtCases[city != "Not Reported", .(state,city) ] %>% unique(by=c("state","city") )
# %>% saveRDS("../dtCaHealthRegions.Rds") # 92
}
dt0 <- rbind(
dtCases[ , .(cases=.N, type="confirmed" ), keyby = c("date", "state", "country")],
dtMortality[ , .(cases=.N, type="deaths"), keyby = c("date", "state", "country")]
) [, city:=STR_TOTAL] %>%
dcast(date+country+state+city ~ type, value.var="cases")
dt00 <- rbind (
dtCases[ , .(cases=.N, type="confirmed" ), keyby = c("date", "country", "state", "city")],
dtMortality[ , .(cases=.N, type="deaths"), keyby = c("date", "country", "state", "city")]
) %>%
dcast(date+country+state+city ~ type, value.var="cases")
dtAll <- dt0 %>% rbind(dt00)
rm(dt0); rm(dt00)
dtAll [, (COLS_CASES):= lapply(.SD, tidyr::replace_na, 0), .SDcol = COLS_CASES]
dtAll [, (COLS_GEO):= lapply(.SD, base::iconv,"ASCII//TRANSLIT", from="UTF-8", to="ASCII//TRANSLIT"), .SDcol = COLS_GEO]
if (abbreviate) { # perhaps, better to use official LOOKUP TABLE from Canada.ca?
dtAll %>%
dt.replaceAwithB("state", "New Brunswick", "NB"  ) %>%
dt.replaceAwithB("state",  "Nova Scotia", "NS" ) %>%
dt.replaceAwithB("state",  "Saskatchewan", "SK" ) %>%
dt.replaceAwithB("state",  "Manitoba", "MB" ) %>%
dt.replaceAwithB("state",  "Ontario", "ON" ) %>%
dt.replaceAwithB("state",  "Quebec", "QC" ) %>%
dt.replaceAwithB("state", "Alberta", "AB"  )
} else {
dtAll %>%
dt.replaceAwithB("state", "PEI", "Prince Edward Island"  ) %>%
dt.replaceAwithB("state", "BC", "British Columbia"  ) %>%
dt.replaceAwithB("state",  "NWT", "Northwest Territories" ) %>%
dt.replaceAwithB("state",  "NL", "Newfoundland and Labrador" )
}
dtAll[, region:=paste0(str_trunc(state, 3, ellipsis = ""), ": ", city)] # used in reduceToTopN()
abbreviate=T
if (abbreviate) { # perhaps, better to use official LOOKUP TABLE from Canada.ca?
dtAll %>%
dt.replaceAwithB("state", "New Brunswick", "NB"  ) %>%
dt.replaceAwithB("state",  "Nova Scotia", "NS" ) %>%
dt.replaceAwithB("state",  "Saskatchewan", "SK" ) %>%
dt.replaceAwithB("state",  "Manitoba", "MB" ) %>%
dt.replaceAwithB("state",  "Ontario", "ON" ) %>%
dt.replaceAwithB("state",  "Quebec", "QC" ) %>%
dt.replaceAwithB("state", "Alberta", "AB"  )
} else {
dtAll %>%
dt.replaceAwithB("state", "PEI", "Prince Edward Island"  ) %>%
dt.replaceAwithB("state", "BC", "British Columbia"  ) %>%
dt.replaceAwithB("state",  "NWT", "Northwest Territories" ) %>%
dt.replaceAwithB("state",  "NL", "Newfoundland and Labrador" )
}
dtAll[, region:=paste0(str_trunc(state, 3, ellipsis = ""), ": ", city)] # used in reduceToTopN()
setkey(dtAll, date)
#' Title
#'
#' @param offline
#' @param abbreviate
#'
#' @return
#' @rdname caCovid
#' @export
#'
#' @examples
readCovidUofT.csv <- function (offline=T, abbreviate=T) {
if (offline) { # to run in GC networks that do not allow access to external sites
# dtCases <- fread("MY_DATASETS/cases_2021-5000.csv", stringsAsFactors = F )
dtCases <- fread("MY_DATASETS/cases_2021.csv", stringsAsFactors = F )
# fwrite(dtCases[(.N-5000):.N], "MY_DATASETS/cases_2021-5000.csv")
dtMortality <- fread("MY_DATASETS/mortality_2021.csv", stringsAsFactors = F )
} else {
# dtMortality  <- fread("https://github.com/ishaberry/Covid19Canada/raw/master/mortality.csv", stringsAsFactors = F ) <- This is where they used to be originally
dtCases <- fread("https://github.com/ccodwg/Covid19Canada/raw/master/individual_level/cases_2021.csv", stringsAsFactors = F )
dtMortality <- fread("https://github.com/ccodwg/Covid19Canada/raw/master/individual_level/mortality_2021.csv", stringsAsFactors = F )
}
if (F) { # quickly see what they are
dt.setOptions(topn = 2)
dtCases;dtMortality
}
# Worst:   dtCases <- dtCases %>% select(5:8) %T>% print(2)
# Better:
dtCases <- dtCases[, 5:8] %T>% print(2)
# Much better:
# dtCases[, (1:ncol(dtCases) %wo% 5:8) := NULL] []
# Which can be written as a function:   dtCases %>% dt.keepCols(5:8) %>% print(2)
dtMortality <- dtMortality[, c(6:9)] %T>% print(2)
# dt.keepCols(dtCases, 5:8)     %>% setnames(c("city", "state", "country", "date")) %>%  .[date := dmy(date)]
# dt.keepCols(dtMortality, 6:9) %>% setnames(c("city", "state", "country", "date")) %>%  .[date := dmy(date)]
setnames(dtCases, c("city", "state", "country", "date"));
setnames(dtMortality, c("city", "state", "country", "date"));
dtCases [ , date := dmy(date)];
dtMortality [ , date := dmy(date)]
if (T) { # quick check on how geo names are spelled
dtCases %>% unique (by=c("state","city") ) # 102
dtCases[city != "Not Reported", .(state,city) ] %>% unique(by=c("state","city") )
# %>% saveRDS("../dtCaHealthRegions.Rds") # 92
}
# . get at state level ----
dt0 <- rbind(
dtCases[ , .(cases=.N, type="confirmed" ), keyby = c("date", "state", "country")],
dtMortality[ , .(cases=.N, type="deaths"), keyby = c("date", "state", "country")]
) [, city:=STR_TOTAL] %>%
dcast(date+country+state+city ~ type, value.var="cases")
# . get at city level ----
dt00 <- rbind (
dtCases[ , .(cases=.N, type="confirmed" ), keyby = c("date", "country", "state", "city")],
dtMortality[ , .(cases=.N, type="deaths"), keyby = c("date", "country", "state", "city")]
) %>%
dcast(date+country+state+city ~ type, value.var="cases")
dtAll <- dt0 %>% rbind(dt00)
rm(dt0); rm(dt00)
dtAll [, (COLS_CASES):= lapply(.SD, tidyr::replace_na, 0), .SDcol = COLS_CASES]
dtAll [, (COLS_GEO):= lapply(.SD, base::iconv,"ASCII//TRANSLIT", from="UTF-8", to="ASCII//TRANSLIT"), .SDcol = COLS_GEO]
if (abbreviate) { # perhaps, better to use official LOOKUP TABLE from Canada.ca?
dtAll %>%
dt.replaceAwithB("state", "New Brunswick", "NB"  ) %>%
dt.replaceAwithB("state",  "Nova Scotia", "NS" ) %>%
dt.replaceAwithB("state",  "Saskatchewan", "SK" ) %>%
dt.replaceAwithB("state",  "Manitoba", "MB" ) %>%
dt.replaceAwithB("state",  "Ontario", "ON" ) %>%
dt.replaceAwithB("state",  "Quebec", "QC" ) %>%
dt.replaceAwithB("state", "Alberta", "AB"  )
} else {
dtAll %>%
dt.replaceAwithB("state", "PEI", "Prince Edward Island"  ) %>%
dt.replaceAwithB("state", "BC", "British Columbia"  ) %>%
dt.replaceAwithB("state",  "NWT", "Northwest Territories" ) %>%
dt.replaceAwithB("state",  "NL", "Newfoundland and Labrador" )
}
dtAll[, region:=paste0(str_trunc(state, 3, ellipsis = ""), ": ", city)] # used in reduceToTopN()
# This can be done outside of function:
# dtAll <- dtAll[ state != "Repatriated"]
# dtAll [, (COLS_GEO):=lapply(.SD, as.ordered), .SDcols=COLS_GEO]
setkey(dtAll, date)
return(dtAll)
}
dt1 <- readCovidUofT.csv()
library(rCanada)
dt1 <- readCovidUofT.csv()
dt1 <- rCanada::readCovidUofT.csv()
library(rCanada)
dt1 <- rCanada::readCovidUofT.csv()
library(rCanada)
dt1 <- rCanada::readCovidUofT.csv()
library(rCanada)
dt1 <- rCanada::readCovidUofT.csv()
# dtCases <- fread("MY_DATASETS/cases_2021-5000.csv", stringsAsFactors = F )
dtCases <- fread("MY_DATASETS/cases_2021.csv", stringsAsFactors = F )
# fwrite(dtCases[(.N-5000):.N], "MY_DATASETS/cases_2021-5000.csv")
dtMortality <- fread("MY_DATASETS/mortality_2021.csv", stringsAsFactors = F )
dtCases [ , date := lubridate::dmy(date_report)];
dtCases <- dtCases[date<ymd("2021/01/31")][, date:=NULL]
dtMortality [ , date := lubridate::dmy(date_death_report)]
dtMortality <- dtMortality[date<ymd("2021/01/31")][, date:=NULL]
dtMortality
usethis::use_data(dtCases, dtMortality)
dtCases <- load("data/dtCases.rda")
dtCases
if (offline) { # to run in GC networks that do not allow access to external sites
dtCases <- load("data/dtCases.rda")
dtMortality <- load("data/dtMortality.rda")
dtCases <- fread("MY_DATASETS/cases_2021.csv", stringsAsFactors = F )
dtMortality <- fread("MY_DATASETS/mortality_2021.csv", stringsAsFactors = F )
if (F) {
dtCases [ , date := lubridate::dmy(date_report)];
dtCases <- dtCases[date<ymd("2021/01/31")][, date:=NULL]
dtMortality [ , date := lubridate::dmy(date_death_report)]
dtMortality <- dtMortality[date<ymd("2021/01/31")][, date:=NULL]
usethis::use_data(dtCases, dtMortality)
}
} else {
# dtMortality  <- fread("https://github.com/ishaberry/Covid19Canada/raw/master/mortality.csv", stringsAsFactors = F ) <- This is where they used to be originally
dtCases <- fread("https://github.com/ccodwg/Covid19Canada/raw/master/individual_level/cases_2021.csv", stringsAsFactors = F )
dtMortality <- fread("https://github.com/ccodwg/Covid19Canada/raw/master/individual_level/mortality_2021.csv", stringsAsFactors = F )
}
dtCases <- load("data/dtCases.rda")
dtCases
str(dtCases)
load("C:/Users/gxd006/Downloads/_CODES/my_packages/rCanada/data/dtMortality.rda")
load("data/dtMortality.rda")
dtMortality
devtools::load_all(".")
dt <- readCovidUofT.csv()
dt
readCovidUofT.csv
dt <- readCovidUofT.csv()
library(rCanada)
dt
readCovidUofT.csv
library(rCanada)
dt <- rCanada::readCovidUofT.csv()
dt
dtCases <- fread("https://github.com/ccodwg/Covid19Canada/raw/master/individual_level/cases_2021.csv")
library(IVIM)
library(data.table); options(datatable.print.class=TRUE) # NB: library(data.table) MUST BE BEFORE library(lubridate)!
ymd("2000-10-20")
library(IVIM) # Calling IVIM does not call other required packages !
dtCases <- fread("https://github.com/ccodwg/Covid19Canada/raw/master/individual_level/cases_2021.csv", stringsAsFactors = F )
dtMortality <- fread("https://github.com/ccodwg/Covid19Canada/raw/master/individual_level/mortality_2021.csv", stringsAsFactors = F )
library(png)
