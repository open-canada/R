devtools::document()
?iviOptions
?dt.rmCols
devtools::document()
?dt.rmCols
devtools::document()
?dt.rmCols
warnings()
devtools::document()
warnings()
library(IVIM)
devtools::document()
IVIM::iviOptions()
?iviOptions
1 %wo% c(1,3)
1 %ni% c(1,3)
1 %notin% c(1,3)
?ivi.test.2021.05.12
devtools::document()
?ivi.test.2021.05.12
use_news_md()
library(usethis)
use_news_md()
devtools::document()
?iviOptions
?dt.replaceAwithB
dt <- data.table(province=c("Alberta", "Quebec"))
dt
dt.replaceAwithB (dt, "Alberta", "AB")
devtools::document()
dt.replaceAwithB (dt, "Alberta", "AB")
library(IVIM)
dt.replaceAwithB (dt, "Alberta", "AB")
df <- iris;
dt2 <- dt1 <- df %>% setDT
IVIM::iviPackages()
devtools::document()
library(IVIM)
dt2 <- dt1 <- df %>% setDT
dt1[Species=="virginica", Species:="virgin."]
dt2 %>% dt.replaceAwithB(Species, "virginica", "virgin.")
df <- iris;
dt2 <- dt1 <- df %>% setDT
df <- iris;
dt2 <- dt1 <- df %>% setDT
dt1[Species=="virginica", Species:="virgin."]
dt2 %>% dt.replaceAwithB(Species, "virginica", "virgin.")
dt <- data.table(province=c("Alberta", "Quebec"))
dt.replaceAwithB (dt, "Alberta", "AB")
library(IVIM)
warnings()
dt <- data.table(province=c("Alberta", "Quebec"))
library(data.table)
dt <- data.table(province=c("Alberta", "Quebec"))
dt %>% dt.replaceAwithB ("province", "Alberta", "AB")
dt <- data.table(province=c("Alberta", "Quebec"))
dt.replaceAwithB (dt, "province", "Quebec", "QB")[]
dt %>% dt.replaceAwithB ("province", "Alberta", "AB")
library(magrittr)
dt %>% dt.replaceAwithB ("province", "Alberta", "AB") []
dt
dt %>% dt.replaceAwithB ("province", "Alberta", "AB")
dt
# Compare to (w. dtply:
dt <- lazy_dt(df)
# Standard way (w/o data.table)
df <- iris; df
# Standard way (w/o data.table)
df <- iris[50:51,]; df
# Standard way (w/o data.table)
df <- iris[100:101,]; df
df0 <- df %>%
filter(Species=="virginica") %>%
mutate(Species="virgin."); df0; df
library(dplyr)
df0 <- df %>%
filter(Species=="virginica") %>%
mutate(Species="virgin."); df0; df
iris %>% mutate_at(vars(matches("Sepal")), log)
df0 <- df %>%
mutate_if(Species="virginica","virgin."); df0; df
# Compare to (using Wickam's dtplyr to connect to data.table):
library(dtplyr)
dt <- lazy_dt(df)
dt0 <- dt %>%
filter(Species=="virginica") %>%
mutate(Species="virgin.") %>%
show_query(); dt0; dt
dt0 <- dt %>%
filter(Species=="virginica") %>%
mutate(Species="virgin.") %>%
show_query(); dt0; dt; dt0 %>% as.data.table()
dt0 %>% as.data.table()
dt0;
dt0 <- dt %>%
filter(Species=="virginica") %>%
mutate(Species="virgin.") %T>%
show_query();
dt0;
dt0 %>% as.data.table()
dt;
# df0 <- df %>%
#   mutate_if(Species="virginica","virgin."); df0; df
df0 <- df %>%
# filter(Species=="virginica") %>%
mutate(Species=ifelse(Species=="virginica", "virgin.", "virginica"); df0; df
# Compare to (using Wickam's dtplyr to connect to data.table):
library(dtplyr)
dt <- lazy_dt(df)
dt0 <- dt %>%
filter(Species=="virginica") %>%
mutate(Species="virgin.") %T>%
show_query();
dt0;
dt;
dt0 %>% as.data.table()
# ... and finally to:
dt2 <- dt1 <- df %>% setDT
dt1[Species=="virginica", Species:="virgin."]
dt2 %>% dt.replaceAwithB("Species", "virginica", "virgin.")
}
#' @rdname iviDT
#' @export
dt.reset <- function(dt) {
setDT(setDF(dt))
# can we do it w/o assignment ? (by pointers?)
# dt <- setDT(setDF(dt))
}
if (F) { # TEST 1 ----
dtProjectile <- data.table()
dtProjectile$angle<- c(15, 30, 45, 60, 75)
dtProjectile$distance <- c(5.1, 8, 10,  8.5, 4.8)
dtProjectile <- dt.reset(dtProjectile) # setDT(setDF(dtProjectile))
ggplot() + geom_point( aes(dtProjectile$angle, projectile$distance)  ) # Works
ggplot(dtProjectile) + geom_point( aes(angle,distance) ) # Does not work UNLESS setDT(setDF())
}
#' Keep or remove columns in data.table by memory reference
#' @rdname iviDT
#' @export
dt.rmCols <- function (dt, cols){
dt [, (cols):=NULL]
}
#' @rdname iviDT
#' @export
dt.keepCols <- function (dt, cols) {
if (is.integer(cols))
dt.rmCols(dt, 1:ncol(dt) %wo% cols)
else
dt.rmCols(dt, names(dtCases) %wo% cols)
}
# Standard way (using dplyr w/o data.table)
df <- iris[100:101,]; df
library(dplyr)
# df0 <- df %>%
#   mutate_if(Species="virginica","virgin."); df0; df
df0 <- df %>%
# filter(Species=="virginica") %>%
mutate(Species=ifelse(Species=="virginica", "virgin.", "virginica")); df0; df
# df0 <- df %>%
#   mutate_if(Species="virginica","virgin."); df0; df
df0 <- df %>%
# filter(Species=="virginica") %>%
mutate(Species=ifelse(Species=="virginica", "virgin.", Species)); df0; df
# Standard way (using dplyr w/o data.table)
df <- iris[100:101,]; df
library(dplyr)
# df0 <- df %>%
#   mutate_if(Species="virginica","virgin."); df0; df
df0 <- df %>%
# filter(Species=="virginica") %>%
mutate(Species=ifelse(Species=="virginica", "virgin.", Species)); df0; df
# Standard way (using dplyr w/o data.table)
df <- iris[100:101,]; df
library(dplyr)
# df0 <- df %>%
#   mutate_if(Species="virginica","virgin."); df0; df
df0 <- df %>%
# filter(Species=="virginica") %>%
mutate(Species=ifelse(Species=="virginica", "virgin.", "Species")); df0; df
dt.replaceAwithB (dt, "province", "Quebec", "QB")[]
dt <- data.table(province=c("Alberta", "Quebec"))
lazy_dt(df) %>% str()
lazy_dt(df) %>% class()
dt1 <- data.table(province=c("Alberta", "Quebec"))
dt.replaceAwithB (dt1, "province", "Quebec", "QB")[]
dt1 %>% dt.replaceAwithB ("province", "Alberta", "AB"); dt1
dt1 %>%
dt.replaceBwithA ("province", "Quebec", "QB") %>%
dt.replaceBwithA ("province", "Alberta", "AB"); dt1
library(IVIM)
dt1 %>%
dt.replaceBwithA ("province", "Quebec", "QB") %>%
dt.replaceBwithA ("province", "Alberta", "AB"); dt1
library(IVIM)
dt1 <- data.table(province=c("Alberta", "Quebec"))
dt.replaceAwithB (dt1, "province", "Quebec", "QB")[]
dt1 %>% dt.replaceAwithB ("province", "Alberta", "AB"); dt1
dt1 %>%
dt.replaceBwithA ("province", "Quebec", "QB") %>%
dt.replaceBwithA ("province", "Alberta", "AB"); dt1
dt1
library(IVIM)
dt1 %>%
dt.replaceBwithA ("province", "Quebec", "QB") %>%
dt.replaceBwithA ("province", "Alberta", "AB"); dt1
# dt1[province== "Quebec", province:="QB"
#     ][province== "Alberta", province:="AB"][]
dt1[province== "Quebec", province:="QB"][
province== "Alberta", province:="AB"][]
# Standard way (least efficient - using dplyr w/o data.table)
df <- iris[100:101,]; df
library(dplyr)
# df0 <- df %>%
#   mutate_if(Species="virginica","virgin."); df0; df
df0 <- df %>%
# filter(Species=="virginica") %>%
mutate(Species=ifelse(Species=="virginica", "virgin.", Species)); df0; df
# Compare to (not much better - using Wickam's dtplyr way around with data.table):
library(dtplyr)
dtBackEnd <- lazy_dt(df)
dtBackEnd0 <- dtBackEnd %>%
filter(Species=="virginica") %>%
mutate(Species="virgin.") %T>%
show_query();
dtBackEnd0;
dtBackEnd;
dtBackEnd0 %>% as.data.table()
dtBackEnd0 %>% setDT()
dtBackEnd0
library(IVIM)
dt1 <- data.table(province=c("Alberta", "Quebec"))
library(IVIM)
dt1 <- data.table(province=c("Alberta", "Quebec"))
library(data.table)
library(magrittr)
dt1 <- data.table(province=c("Alberta", "Quebec"))
# I prefer this style (because of [] at the end):
dt1[province == "Quebec", province:="QB"
][province == "Alberta", province:="AB"
][]
# Alternative style:
# dt1[province == "Quebec", province:="QB"][
#   province == "Alberta", province:="AB"][
#     province == "Alberta", province:="AB"][]
dt1
dt1 %>%
dt.replaceBwithA ("province", "Quebec", "QB") %>%
dt.replaceBwithA ("province", "Alberta", "AB") %>%
dt.replaceBwithA ("province", "Alberta", "AB");
dt1
dt1[province== "Quebec", province:="QB"] %>%
.[province== "Alberta", province:="AB"] %>%
.[province== "Alberta", province:="AB"] %>% .[]
dt1 %>%
dt.replaceBwithA ("province", "Quebec", "QB") %>%
dt.replaceBwithA ("province", "Alberta", "AB") %>%
dt.replaceBwithA ("province", "Alberta", "AB"); dt1
dt1
# Standard way (least efficient - using dplyr w/o data.table)
df <- iris[100:101,]; df
# R base:
df0 <- df
df0$Species[df$Species == 'virginica'] <- 'virgin.'
df
df %>% str()
df
df0
df; df0
library(dplyr)
df0 <- df  %>%  filter(Species=="virginica") %>% mutate(Species="virgin.") #bad
df; df0
df0 <- df %>% mutate(Species = fct_recode(Species, "virgin." = "virginica" ))  #works
df; df0
rlang::last_error()
rlang::last_trace()
library(forcats)
df0 <- df  %>%  dplyr::filter(Species=="virginica") %>% dplyr::mutate(Species="virgin.") #bad
df; df0
df0 <- dt %>% dplyr:;mutate(Species=ifelse(Species=="virginica", "virgin.", Species)) #bad
df0 <- dt %>% dplyr::mutate(Species=ifelse(Species=="virginica", "virgin.", Species)) #bad
df; df0
df0 <- dt %>% dplyr::mutate(Species=ifelse(Species=="virginica", "virgin.", Species)) #bad
df0 <- df %>% dplyr::mutate(Species=ifelse(Species=="virginica", "virgin.", Species)) #bad
df; df0
df0 <- df %>% dplyr::mutate(Species = forcats::fct_recode(Species, "virgin." = "virginica" ))  #works
df; df0
# Compare to (not much better - using Wickam's dtplyr way around with data.table):
library(dtplyr)
dtBackEnd <- lazy_dt(df)
dtBackEnd0 <- dtBackEnd %>%
filter(Species=="virginica") %>%
mutate(Species="virgin.") %T>%
show_query();
dtBackEnd0;
dtBackEnd;
dtBackEnd0 %>% as.data.table()
# ... and finally to (the best way):
dt2 <- df %>% setDT
dt2 %>% dt.replaceAwithB("Species", "virginica", "virgin.")
dt2
dt2 %>%
dt.replaceAwithB("Species", "virginica", "virgin.") %>%
dt.replaceAwithB("Species", "versicolor", "versic.");   dt2
# R base:
df0 <- df
df0$Species[df$Species == 'virginica'] <- 'virgin.' #bad
df; df0
dt2; df
# Standard way (least efficient - using dplyr w/o data.table)
df <- iris[100:101,]; df
# R base:
df0 <- df
df0$Species[df$Species == 'virginica'] <- 'virgin.' #bad
# ... and finally to (the best way):
dt <- df;
dt2 <- dt %>% setDT; # NB: dt is now data.table !
dt2 %>% dt.replaceAwithB("Species", "virginica", "virgin.");
dt2; df # NB: df also changed !
dt2 %>%
dt.replaceAwithB("Species", "virginica", "virgin.") %>%
dt.replaceAwithB("Species", "versicolor", "versic.");
dt2; df # NB: df also changed !
# Standard way (least efficient - using dplyr w/o data.table)
df <- iris[100:101,]; df
dt2; df # NB: df also changed !
# ... and finally to (the best way):
dt <- df;
dt2 <- dt %>% setDT; # NB: dt is now data.table !
dt2 %>%
dt.replaceAwithB("Species", "virginica", "virgin.") %>%
dt.replaceAwithB("Species", "versicolor", "versic.");
dt2; df # NB: df also changed !
# ... and finally to (the best way):
dt <- copy(df);
dt
# Standard way (least efficient - using dplyr w/o data.table)
df <- iris[100:101,]; df
# ... and finally to (the best way):
dt <- copy(df);
dt2 <- dt %>% setDT; # NB: dt is now data.table !
dt2 %>%
dt.replaceAwithB("Species", "virginica", "virgin.") %>%
dt.replaceAwithB("Species", "versicolor", "versic.");
dt2; df # NB: df also changed !
?copy
# ... and finally to (the best way):
dt <- copy(df);
str(dt)
dt2 <- dt %>% setDT; # NB: dt is now data.table !
str(dt)
dtf %>% dt.replaceAwithB("Species", "virginica", "virgin.")
df %>% dt.replaceAwithB("Species", "virginica", "virgin.")
dt %>% dt.replaceAwithB("Species", "virginica", "virgin.")
# Alternative style:
# dt1[province == "Quebec", province:="QB"][
#   province == "Alberta", province:="AB"][
#     province == "Alberta", province:="AB"][]
dt1
dt1 %>%
dt.replaceBwithA ("province", "Quebec", "QB") %>%
dt.replaceBwithA ("province", "Alberta", "AB") %>%
dt.replaceBwithA ("province", "Alberta", "AB") %>% print
dt1
dt1[province== "Quebec", province:="QB"] %>%
.[province== "Alberta", province:="AB"] %>%
.[province== "Alberta", province:="AB"] %>% .[]
dt1 %>%
dt.replaceBwithA ("province", "Quebec", "QB") %>%
dt.replaceBwithA ("province", "Alberta", "AB") %>%
dt.replaceBwithA ("province", "Alberta", "AB");
dt1
dt1 %>%
dt.replaceBwithA ("province", "Quebec", "QB") %>%
dt.replaceBwithA ("province", "Alberta", "AB") %>%
dt.replaceBwithA ("province", "Alberta", "AB");
dt1 # bug here ? - it does not print dt1. you need to call dt1 again, or call dt1 %>% print
dt1
library(IVIM)
?dt.replaceAwithB
dt.rmCols
dt.rmCols (setDT(iris), "Species")
dt.rmCols (setDT (dt<iris), "Species")
dt.rmCols (setDT (dt<-iris), "Species")
dt
dt %>% dt.rmCols(1)
dt
dt %>% dt.rmCols("Species")
dt
dt<-iris; dt %>%  setDT %>% dt.rmCols (1) %>% dt.rmCols("Species"); dt
IVIM::iviOptions()
?IVIM::iviOptions
library(IVIM)
# Standard way (least efficient - using dplyr w/o data.table)
df <- iris[100:101,]; df
# R base:
df0 <- df
df0$Species[df$Species == 'virginica'] <- 'virgin.' #bad
df; df0
in_old_set <- c("12", "11", "14", "15")
in_new_set <- c("11", "12", "15", "16")
library(IVIM)
iviPackages()
iviOptions()
dtValues_old_new <- data.table(
old = c("12", "11", "14", "15"),
new = c("21", "22", "25", "26")
)
dt <- data.table( chapter=as.character(11:15) );dt
dtLookup <- data.table(
old = c("12", "11", "14", "15"),
new = c("21", "22", "25", "26")
)
dtLookup$old
dt <- data.table( chapter=as.character(11:15) );dt
dtLookup <- data.table(
old = c("12", "11", "14", "15"),
new = c("21", "22", "25", "26")
)
for(i in 1:nrow(dtLookup ) ) {
dt[chapter == dtLookup$old[i], chapter:= dtLookup$new[i]]
};
dt
dt <- data.table( chapter=as.character(11:15) );dt
dtLookup <- data.table(
old = c("11", "12", "14", "15"),
new = c("101", "102", "105", "104")
)
for(i in 1:nrow(dtLookup ) ) {
dt[chapter == dtLookup$old[i], chapter:= dtLookup$new[i]]
};
dt
?setNames
c(chapter = "old")
dt[
dtLookup,
on = .(chapter = "old"),
chapter := new
][]
dt.replaceValueUsingLookup <- function(dt, col, dtLookup) {
dt[
dtLookup,
on = setNames("old", col),
(col) := new
]
}
attrition
??attrition
library(IVIM)
dt <- data.table( chapter=as.character(11:15) );dt
dtLookup <- data.table(
old = c("11", "12", "14", "15"),
new = c("101", "102", "105", "104")
)
dt %>% dt.replaceValueUsingLookup("chapter", dtLookup)
iviPackages()
dt <- data.table( chapter=as.character(11:15) );dt
dtLookup <- data.table(
old = c("11", "12", "14", "15"),
new = c("101", "102", "105", "104")
)
dt %>% dt.replaceValueUsingLookup("chapter", dtLookup)
dt
library(IVIM)
iviPackages()
iviOptions()
# library(data.table)
# library(magrittr)
dt <- setDT(iris)
dt <- as.data.table(iris)
dt <- as.data.table(iris); dt[1:3]
cols=1:2
dt.rmCols(dt, cols)
dt
cols=3:4
dt.keepCols (dt, cols)[]
dt <- as.data.table(iris); dt[1:3]
cols=1:2
dt.rmCols(dt, cols)[1:3]
cols=3:4
dt.keepCols (dt, cols)[1:3]
dt <- data.table( chapter=as.character(11:15) );dt
dtLookup <- data.table(
old = c("11", "12", "14", "15"),
new = c("101", "102", "105", "104")
)
dt %>% dt.replaceValueUsingLookup("chapter", dtLookup)
dt <- data.table( chapter=as.character(11:15) );dt
dtLookup <- data.table(
old = c("11", "12", "14", "15"),
new = c("101", "102", "105", "104")
)
dt %>% dt.replaceValueUsingLookup("chapter", dtLookup)
dt
library(IVIM)
iviPackages()
dt1 <- data.table(province=c("Alberta", "Quebec"))
dt1
dt1 %>%
dt.replaceAwithB ("province", "Quebec", "QB") %>%
dt.replaceAwithB ("province", "Alberta", "AB") %>%
dt.replaceAwithB ("province", "Alberta", "AB");
dt1
# bug here ? - it does not print dt1 ! -  you need to call dt1 again, or call dt1 %>% print
# ask at stackoverflow !
dt1
dt <- data.table( chapter=as.character(11:15) );dt
dtLookup <- data.table(
old = c("11", "12", "14", "15"),
new = c("101", "102", "105", "104")
)
dt %>% dt.replaceValueUsingLookup("chapter", dtLookup)
dt
